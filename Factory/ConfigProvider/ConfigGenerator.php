<?php

namespace lkovace18\EntityFactoryBundle\Factory\ConfigProvider;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Doctrine\ORM\Mapping\ClassMetadataInfo;
use lkovace18\EntityFactoryBundle\Factory\Util\DataGuesser;
use Symfony\Component\HttpKernel\Bundle\Bundle;
use Symfony\Component\HttpKernel\Kernel;

class ConfigGenerator
{
    /** @var EntityManager */
    private $em;

    /**@var DataGuesser */
    private $guesser;

    public function __construct(EntityManager $em, DataGuesser $guesser, Kernel $kernel)
    {
        $this->em = $em;
        $this->guesser = $guesser;
    }

    public function generate($metadata)
    {
        $config = [];

        $bundleMetadata = [];
        foreach ($metadata as $meta) {
            if (strpos($meta->getName(), 'App') !== false) {
                $bundleMetadata[] = $meta;
            }
        }

        foreach ($bundleMetadata as $meta) {
            $config[$meta->getName()] = $this->getConfig($meta);
        }

        return $config;
    }

    /**
     * @param ClassMetadata $meta
     *
     * @return array
     */
    private function getConfig(ClassMetadata $meta)
    {
        $result = [];

        foreach ($meta->fieldMappings as $mapping) {

            if ($this->isAutoGeneratedIdField($meta, $mapping)) {
                continue;
            }

            if (isset($mapping['nullable']) && $mapping['nullable'] === true) {
                /* do not fill data for not required fields */
                continue;
            }

            $result[$mapping['fieldName']] = $this->guesser->guess($mapping);
        }

        foreach ($meta->associationMappings as $mapping) {
            if (in_array($mapping['type'], [ClassMetadataInfo::ONE_TO_ONE, ClassMetadataInfo::MANY_TO_ONE])) {
                $result[$mapping['fieldName']] = $mapping['targetEntity'];
            }
        }

        return $result;
    }

    /**
     * @param ClassMetadata $meta
     * @param               $mapping
     *
     * @return bool
     */
    private function isAutoGeneratedIdField(ClassMetadata $meta, $mapping)
    {
        $isIdentifierField = $meta->isIdentifier($mapping['fieldName']);
        $isAutoGenerated = $meta->generatorType !== ClassMetadata::GENERATOR_TYPE_NONE;

        return $isIdentifierField && $isAutoGenerated;
    }

    /**
     * @param Bundle $bundle
     *
     * @return ClassMetadata[]
     */
    protected function getBundleMetadata(Bundle $bundle)
    {
        $bundleMetadata = [];

        $metadata = $this->em->getMetadataFactory()->getAllMetadata();

        /** @var ClassMetadata $meta */
        foreach ($metadata as $meta) {
            if (strpos($meta->getName(), $bundle->getNamespace()) !== false) {
                $bundleMetadata[] = $meta;
            }
        }

        return $bundleMetadata;
    }
}
